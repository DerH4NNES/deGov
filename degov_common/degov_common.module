<?php

use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\degov_common\DegovOverride;
use Drupal\degov_common\Form\DegovMediaForm;
use Drupal\degov_common\MediaFormAlter;
use Drupal\degov_common\Plugin\views\filter\DegovBundle;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\media_entity\MediaInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_views_plugins_filter_alter().
 */
function degov_common_views_plugins_filter_alter(array &$plugins) {
  DegovOverride::pluginClass($plugins['bundle'], DegovBundle::class);
}

/**
 * Implements hook_views_data_alter().
 * Adds custom views fields.
 */
function degov_common_views_data_alter(array &$data) {
  // Add the usage field to media.
  $data['media']['usage'] = array(
    'title' => t('Media Usage'),
    'field' => array(
      'title' => t('Usage'),
      'help' => t('Shows the list of media usage.'),
      'id' => 'degov_media_usage',
    ),
  );
}

/**
 * Implements hook_theme().
 */
function degov_common_theme() {
  return array(
    'degov_file_download_link' => array(
      'variables' => array('file' => NULL, 'download_link' => NULL, 'icon' => '', 'file_size' => NULL, 'attributes' => NULL),
    ),
  );
}

/**
 * Returns a Url for a file download.
 *
 * @param \Drupal\file\FileInterface $file
 * @param array $options
 *   (optional) Options for the URL object.
 *
 * @return \Drupal\Core\Url An Url object for the download url.
 * An Url object for the download url.
 */
function degov_common_file_download_link($file, $options = []) {
  $url = new \Drupal\Core\Url('degov_common.file_download', array('file' => $file->id()), $options);
  return $url;
}

/**
 * Get file type.
 *
 * @param $variables
 */
function degov_common_preprocess_degov_file_download_link(&$variables) {
  /** @var \Drupal\file\FileInterface $file */
  $file = $variables['file'];
  $mime_type = $file->getMimeType();
  $mime_type = explode('/', $mime_type);
  if (!empty($mime_type[1])) {
    $variables['file_type'] = $mime_type[1];
  } else {
    $variables['file_type'] = pathinfo($file->getFileUri(), PATHINFO_EXTENSION);
  }
}

/**
 * @param \Drupal\file\FileInterface $file
 *
 * @return array
 */
function degov_common_file_download_render_array($file) {
  if ($file instanceof \Drupal\file\FileInterface) {
    // Prepare the attributes for the main container of the template.
    $attributes = new \Drupal\Core\Template\Attribute();
    // Prepare the text and the URL of the link.
    $mime_type = $file->getMimeType();
    $download_url = degov_common_file_download_link($file, ['attributes' => ['type' => $mime_type . '; length=' . $file->getSize()]]);
    return [
      '#theme' => 'degov_file_download_link',
      '#file' => $file,
      '#download_link' => \Drupal\Core\Link::fromTextAndUrl(t('Download'), $download_url),
      '#icon' => file_icon_class($mime_type),
      '#attributes' => $attributes,
      '#file_size' => format_size($file->getSize()),
    ];
  }
}

/**
 * Set degov_common module to run the last on some hooks.
 * @param $implementations
 * @param $hook
 */
function degov_common_module_implements_alter(&$implementations, $hook) {
  if (in_array($hook, ['views_plugins_filter_alter', 'entity_type_alter', 'form_alter'])) {
    // Move my_module_form_alter() to the end of the list.
    // \Drupal::moduleHandler()->getImplementations()
    // iterates through $implementations with a foreach loop which PHP iterates
    // in the order that the items were added, so to move an item to the end of
    // the array, we remove it and then add it.
    $group = $implementations['degov_common'];
    unset($implementations['degov_common']);
    $implementations['degov_common'] = $group;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function degov_common_preprocess_node(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];
  // Remove the right sidebar paragraph in case no content exists.
  if ($node->hasField('field_sidebar_right_paragraphs') && !empty($variables['content']['field_sidebar_right_paragraphs'])) {
    unset($variables['content']['field_sidebar_right_paragraphs']);
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter() for media entities.
 *
 * @param array $build
 * @param \Drupal\media_entity\MediaInterface $entity
 * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
 */
function degov_common_media_view_alter(array &$build, MediaInterface $entity, EntityViewDisplayInterface $display) {
  // Skip adding contextual links if the Paragraph is in a QuickEdit form context
  // to avoid causing conflicts with Quickedit JS
  if (\Drupal::routeMatch()->getRouteName() == 'quickedit.field_form') {
    return;
  }

  $build['#contextual_links']['media'] = [
    'route_parameters' => [
      'media' => $entity->id(),
    ],
    'metadata' => ['changed' => $entity->getChangedTime()],
  ];
}

/**
 * Implements hook_preprocess_HOOK() for media.html.twig.
 *
 * @see contextual_preprocess()
 * @see template_preprocess_paragraph()
 */
function degov_common_preprocess_media(&$variables) {
  // Media templates don't normally print the title_suffix, so add the
  // contextual links to the content render array.
  if (isset($variables['title_suffix']['contextual_links'])) {
    $variables['content']['contextual_links'] = $variables['title_suffix']['contextual_links'];
    $variables['content']['contextual_links']['#weight'] = -100;
  }

  if (isset($variables['elements']['#view_mode'])
    && isset($variables['media'])
    && $variables['elements']['#view_mode'] === 'usage'
    && $variables['media'] instanceof MediaInterface) {
    $media = $variables['media'];
    /* @var \Drupal\entity_reference_integrity\EntityReferenceDependencyManager $dependency_manager */
    $dependency_manager = \Drupal::service('entity_reference_integrity.dependency_manager');

    if ($dependency_manager->hasDependents($media)) {
      $referencing_entities = $dependency_manager->getDependentEntities($media);

      foreach ($referencing_entities as $entity_type_id => $entities) {
        $build[$entity_type_id]['list'] = [
          '#title' => reset($entities)->getEntityType()->getLabel(),
          '#theme' => 'item_list',
          '#items' => [],
        ];

        /* @var \Drupal\Core\Entity\EntityInterface $entity */
        foreach ($entities as $entity) {
          $build[$entity_type_id]['list']['#items'][] = $entity->hasLinkTemplate('canonical') ? $entity->toLink() : $entity->label();
        }
      }

      if (!empty($build)) {
        $variables['content']['usage'] = $build;
      }
    }
  }
}

/**
 * @param $modules
 */
function degov_common_modules_installed($modules) {
  foreach ($modules as $module) {
    \Drupal::service('degov_config.block_installer')->placeBlockConfig($module);
  }
  // Flush plugin caches so our facets will be shown.
  \Drupal::service('plugin.cache_clearer')->clearCachedDefinitions();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function degov_common_form_entity_browser_ckeditor_media_browser_form_alter(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $form['#attached']['library'][] = 'lightning_media/browser.styling';
}

/**
 * Alter menu add/edit form.
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function degov_common_form_menu_link_content_menu_link_content_form_alter(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  if (!empty($form['link']['widget'][0]['options']['attributes']['class'])) {
    $form['link']['widget'][0]['options']['attributes']['class']['#description'] = t('Geben Sie hier eine <a href="http://fontawesome.io/cheatsheet" target="_blank">Font-Awesome</a> Klasse ein, z.B. "fa-archive", um das entsprechende Icon anzuzeigen (nur erste MenÃ¼ebene).');
  }
}

/**
 * Implements hook_entity_type_alter().
 *
 * It is needed to change the class for media edit form to force thumbnail
 * regeneration, because when you change the source image/video/etc (media item)
 * the thumbnail is still referencing the old file entity.
 *
 */
function degov_common_entity_type_alter(array &$entity_types) {
  // Try to set the class for Media edit form from degov_common module to force thumbnail regeneration.
  $entity_type = $entity_types['media'];
  $replacement_class = DegovMediaForm::class;
  if (get_parent_class($replacement_class) == $entity_type->getFormClass('edit')) {
    $entity_type->setFormClass('edit', $replacement_class);
  }
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function degov_common_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\Core\Form\FormInterface $form_object */
  $form_object = $form_state->getFormObject();
  if ($form_object->getFormId() === 'media_multiple_delete_confirm') {
    \Drupal::service('class_resolver')
      ->getInstanceFromDefinition(MediaFormAlter::class)
      ->formAlter($form, $form_state, $form_id);
  }
  // Alter the media forms.
  if (method_exists($form_object, 'getBaseFormId') && $form_object->getBaseFormId() == 'media_form') {
    // field_media_in_library now is deprecated, let's restrict access to it.
    // @TODO the field comes from lightning, remove the code after eliminating the dependency on Lightning profile.
    if (!empty($form['field_media_in_library'])) {
      $form['field_media_in_library']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_field_info_alter().
 */
function degov_common_field_info_alter(&$info) {
  // Change the class for viewsreference field type.
  if (isset($info['viewsreference'])) {
    $info['viewsreference']['class'] = 'Drupal\degov_common\Plugin\Field\FieldType\ViewsReferenceOverride';
  }
}

/**
 * HELPER FUNCTIONS FOR viewsreference module.
 */

/**
 * Get the correct nested form element name.
 *
 * @param $dependee
 * @param $element
 * @param $field_definition
 *
 * @return string
 */
function _views_selector_get_state_name($dependee, $element, $field_definition) {
  $selector = $element['target_id']['#field_parents'];
  $selector[] = $field_definition->get('field_name');
  $selector[] = '0';
  $selector[] = $dependee;
  $start = array_shift($selector);
  return $start . '[' . implode('][', $selector) . ']';
}

/**
 * Returns the field value on ajax callback event change.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * @return array
 */
function degov_views_argument_getter(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $trigger = $form_state->getTriggeringElement();
  $parents = $trigger['#array_parents'];
  $triggered_element = array_pop($parents);
  $parents[] = 'view_settings';
  return NestedArray::getValue($form, $parents);
}

/**
 * Retrieves the field info by given contextual filter.
 *
 * @param $argument
 *
 * @return array
 */
function _views_argument_field_info($argument) {
  $info = FALSE;
  if (!empty($argument['table'])) {
    $keys = explode('__', $argument['table']);
    if (!empty($keys)) {
      $info = FieldStorageConfig::loadByName($keys[0], $keys[1]);
      // if it is entity reference field try to get the target type and selector settings
      if ($info && $info->getType() == 'entity_reference') {
        $bundles = $info->getBundles();
        $bundles_machine_names = array_keys($bundles);
        $bundle_info = FieldConfig::loadByName($keys[0], $bundles_machine_names[0], $keys[1]);
      }
      else {
        $bundle_info = [];
      }
    }
  }

  return ['info' => $info, 'bundle_info' => $bundle_info];
}

/**
 * @param $element
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $context
 */
function degov_common_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $items */
  $items = $context['items'];
  // Get the field definition.
  $field_definition = $items->getFieldDefinition();
  if ($field_definition->getType() == 'viewsreference') {
    // Get configuration settings for the form widget.
    $config = \Drupal::service('config.factory')
      ->getEditable('degov_views_helper.settings');
    $allowed_forms = $config->get('form_ids');
    // Get the form renderer array.
    $form = $form_state->getCompleteForm();
    // If the form is within the allowed ones - alter.
    if (in_array($form['#form_id'], $allowed_forms)) {
      // Get the allowed views list.
      $allowed_views = $config->get('allowed_views');
      // Loop through the element options and remove not allowed.
      foreach ($element['target_id']['#options'] as $key => $view_name) {
        if (empty($allowed_views[$key])) {
          unset($element['target_id']['#options'][$key]);
        }
      }
    }
    $element['title']['#access'] = FALSE;
    // Create the selector for the arguments fields for the ajax response.
    $arguments_wrapper_selector = implode('_', $element['target_id']['#field_parents']) . '_arguments';
    $arguments_weight = !empty($element['argument']['#weight']) ? $element['argument']['#weight'] : 10;
    // Add empty option and ajax callback for the display_id field.
    $element['display_id']['#options'] = ['_none' => t('-- Choose view display --')] + $element['display_id']['#options'];
    $element['display_id']['#ajax'] = [
      'event' => 'change',
      'progress' => [
        'type' => 'throbber',
        'message' => t('Loading view details ...'),
      ],
      'callback' => 'degov_views_argument_getter',
      'wrapper' => $arguments_wrapper_selector,
      'method' => 'replace',
    ];
    $element['target_id']['#attributes']['class'][] = 'viewreference_target_id';
    $element['display_id']['#attributes']['class'][] = 'viewreference_display_id';
    $element['#attached']['library'][] = 'degov_common/viewsreference';
    // Fix state for argument.
    // Get correct field name including parents.
    $view_selector = _views_selector_get_state_name('target_id', $element, $field_definition);
    $element['display_id']['#states']['visible'] = [
      ':input[name="' . $view_selector . '"]' => ['!value' => '_none'],
    ];
    $display_selector = _views_selector_get_state_name('display_id', $element, $field_definition);
    $element['argument']['#states']['visible'] = [
      ':input[name="' . $display_selector . '"]' => ['!value' => 'default'],
      ':input[name="' . $display_selector . '"]' => ['!value' => '_none'],
    ];
    // Get arguments states to set them to entity reference field too.
    $argument_states = $element['argument']['#states'];
    // Get extra data from serialized field.
    $extra_data = [];
    $values = $items->getValue();
    if (!empty($values[0]['data'])) {
      $extra_data = unserialize($values[0]['data']);
    }
    $element['page_limit'] = [
      '#type' => 'number',
      '#title' => t('Page limit'),
      '#default_value' => !empty($extra_data['page_limit']) ? $extra_data['page_limit'] : '',
      '#weight' => 10,
    ];
    $element['argument'] = [
      '#tree' => TRUE,
      '0' => $element['argument'],
    ];
    $entity_type = 'node';
    if (!empty($values[0]['target_id'])) {
      /** @var \Drupal\views\Entity\View $view */
      $view = \Drupal\views\Entity\View::load($values[0]['target_id']);
      $entity_type = $view->getExecutable()->getBaseEntityType()->id();
      $display_id = 'default';
      if (!empty($values[0]['display_id']) && $values[0]['display_id'] != '_none') {
        $display_id = $values[0]['display_id'];
      }
      // Get the view display.
      $display = $view->getDisplay($display_id);
      // Contexual arguments if they are not overriden are set only in default.
      if (empty($display['display_options']['arguments'])) {
        // If no arguments found try to get the ones from default display.
        $display = $view->getDisplay('default');
      }
      $argument_values = explode('/', $values[0]['argument']);
      if (!empty($display['display_options']['arguments'])) {
        $num = 0;
        foreach ($display['display_options']['arguments'] as $argument_name => $argument_value) {
          $title_extra = '';
          if ($argument_value['not']) {
            $title_extra = ' (' . t('Exclude this items') . ')';
          }
          if ($argument_name == 'tid' && $argument_value['table'] == 'taxonomy_index') {
            $element['argument'][$num] = [
              '#type' => 'entity_autocomplete',
              '#title' => t('Taxonomy term') . $title_extra,
              '#default_value' => \Drupal\taxonomy\Entity\Term::load($argument_values[$num]),
              '#target_type' => 'taxonomy_term',
              '#selection_handler' => 'default:taxonomy_term',
              '#selection_settings' => [],
            ];
            $num++;
            continue;
          }
          if ($argument_name == 'nid' && $argument_value['table'] == 'node_field_data') {
            $element['argument'][$num] = [
              '#type' => 'entity_autocomplete',
              '#title' => t('Node') . $title_extra,
              '#default_value' => \Drupal\node\Entity\Node::load($argument_values[$num]),
              '#target_type' => 'node',
              '#selection_handler' => 'default:node',
              '#selection_settings' => [],
            ];
            $num++;
            continue;
          }
          if ($argument_name == 'uid' && $argument_value['table'] == 'node_field_data') {
            $element['argument'][$num] = [
              '#type' => 'entity_autocomplete',
              '#title' => t('User') . $title_extra,
              '#default_value' => \Drupal\user\Entity\User::load($argument_values[$num]),
              '#target_type' => 'user',
              '#selection_handler' => 'default:user',
              '#selection_settings' => [],
            ];
            $num++;
            continue;
          }
          // Get field info.
          $info = _views_argument_field_info($argument_value);
          $field_info = $info['info'];
          $bundle_info = $info['bundle_info'];
          if ($field_info) {
            $element['argument'][$num] = [
              '#type' => ($field_info->getType() == 'entity_reference') ? 'entity_autocomplete' : 'textfield',
              '#title' => empty($bundle_info) ? $field_info->getLabel() : $bundle_info->getLabel(),
              '#description' => empty($bundle_info) ? $field_info->getDescription() : $bundle_info->getDescription(),
              '#default_value' => !empty($argument_values[$num]) ? $argument_values[$num] : '',
            ];
            $element['argument'][$num]['#title'] .= $title_extra;

            // If it is entity reference and some more settings.
            if (($field_info->getType() == 'entity_reference')) {
              $info_settings = $field_info->getSettings();
              $bundle_settings = $bundle_info->getSettings();
              $element['argument'][$num]['#target_type'] = $info_settings['target_type'];
              $element['argument'][$num]['#selection_handler'] = $bundle_settings['handler'];
              $element['argument'][$num]['#selection_settings'] = [];
              $element['argument'][$num]['#selection_settings']['target_bundles'] = $bundle_settings['handler_settings']['target_bundles'];
              // Default value could be only entity, let's load one.
              $entity_storage = \Drupal::entityManager()
                ->getStorage($info_settings['target_type']);
              $entity = $entity_storage->load($element['argument'][$num]['#default_value']);
              $element['argument'][$num]['#default_value'] = $entity ? $entity : '';
            }
          }
          else {
            // This is not field but property of the entity.
            $property = array_shift($argument);
            $element['argument'][$num] = [
              '#type' => 'textfield',
              '#title' => $property['field'],
              '#default_value' => !empty($argument_values[$num]) ? $argument_values[$num] : '',
            ];
          }
          $num++;
        }
      }
    }

    $element['argument']['#prefix'] = '<details id="' . $arguments_wrapper_selector . '_arg" class="form-wrapper">';
    $element['argument']['#prefix'] .= '<summary role="button" aria-controls="' . $arguments_wrapper_selector . '_arg" aria-expanded="false" aria-pressed="false">' . t('View arguments') . '</summary>';
    $element['argument']['#weight'] = $arguments_weight;
    $element['argument']['#states'] = $argument_states;
    $element['argument']['#suffix'] = '</details>';
    $view_modes = \Drupal::service('entity_display.repository')
      ->getViewModeOptions($entity_type);
    if (!in_array($extra_data['view_mode'], array_keys($view_modes))) {
      $extra_data['view_mode'] = 'default';
    }
    $element['view_mode'] = [
      '#type' => 'select',
      '#title' => t('Views row view mode'),
      '#default_value' => !empty($extra_data['view_mode']) ? $extra_data['view_mode'] : 'default',
      '#options' => $view_modes,
      '#weight' => 11,
      '#attributes' => ['class' => ['viewsreference_view_mode']],
    ];
    $element['view_settings'] = [
      '#prefix' => '<div id="' . $arguments_wrapper_selector . '" class="form-wrapper">',
      '#suffix' => '</div>',
      '#type' => 'fieldset',
      '#weight' => 100,
    ];
    $element['view_settings']['argument'] = $element['argument'];
    $element['view_settings']['view_mode'] = $element['view_mode'];
    unset($element['argument']);
    unset($element['view_mode']);
  }
}
