<?php

use Drupal\media_entity\MediaInterface;
use Drupal\Component\Utility\Xss;
use Symfony\Component\Yaml\Yaml;
use Drupal\Component\Utility\NestedArray;

/**
 * Implements hook_modules_installed().
 */
function degov_social_media_settings_modules_installed($modules) {
  $bundles = [];

  if (in_array('degov_media_social_media_embed', $modules)) {
    $bundles[] = 'some_embed';
  }

  if (in_array('degov_media_video', $modules)) {
    $bundles[] = 'video';
  }

  if (!empty($bundles)) {
    /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
    $configFactory = \Drupal::service('config.factory');
    $path = drupal_get_path('module', 'degov_social_media_settings');
    $new = [];
    $add = [];

    foreach ($bundles as $bundle) {
      $new[] = 'field.field.media.' . $bundle . '.field_social_media_source';
      $add[] = 'core.entity_form_display.media.' . $bundle . '.default';
      $add[] = 'core.entity_form_display.media.' . $bundle . '.media_browser';
    }

    foreach ($new as $file) {
      $data = Yaml::parse(file_get_contents(implode(DIRECTORY_SEPARATOR, [$path, 'config', 'optional', $file . '.yml'])));
      $configFactory->getEditable($file)->setData($data)->save();
    }

    foreach ($add as $file) {
      $config = $configFactory->getEditable($file);
      $active = $config->getRawData();

      if (!empty($active)) {
        $insert = Yaml::parse(file_get_contents(implode(DIRECTORY_SEPARATOR, [$path, 'config', 'rewrite', $file . '.yml'])));
        $merged = NestedArray::mergeDeep($active, $insert);
        $config->setData($merged)->save();
      }
    }
  }
}

/**
 * Implements hook_preprocess_paragraph__HOOK().
 */
function degov_social_media_settings_preprocess_paragraph__media_reference(&$variables) {
  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  $paragraph = $variables['paragraph'];
  /** @var \Drupal\media_entity\MediaInterface $media */
  $media = $paragraph->field_media_reference_media->entity;

  // Add a class to the paragraph template for external media.
  if ($media instanceof MediaInterface && in_array($media->bundle(), ['some_embed', 'video'])) {
    $variables['attributes']['class'][] = 'social-media-source-' . $media->field_social_media_source->value;
  }
}

/**
 * Implements hook_preprocess_media().
 */
function degov_social_media_settings_preprocess_media(&$variables) {
  /** @var \Drupal\media_entity\MediaInterface $media */
  $media = $variables['media'];
  $entity_id = $media->id();
  $bundle = $media->bundle();

  // Do not display external media by default. This requires support in the
  // templates. They need to evaluate the $variables['social_media_disabled'].
  // Better solutions are possible, for instance:
  // - a twig filter or
  // - a field formatter or
  // - a preprocess function for the fields and a hook that informs this
  //   module about fields that need to be disabled
  if ($media instanceof MediaInterface && in_array($bundle, ['some_embed', 'video'])) {
    switch ($bundle) {
      case 'some_embed':
        // Maybe make sure this runs after degov_media_social_media_embed_preprocess_media__some_embed
        // and use $variables['code'] from there instead of generating it here?
        $field_value = $media->field_some_embed_code->value;
        $allowed_tags = array_merge(Xss::getAdminTagList(), ['iframe', 'blockquote']);
        $markup = Xss::filter($field_value, $allowed_tags);
        break;
      case 'video':
        $field_value = \Drupal::service('twig_field_value.twig.extension')->getFieldValue($variables['content']['field_media_video_embed_field']);
        $markup = \Drupal::service('renderer')->render($field_value);
        break;
    }

    if (!empty($markup)) {
      $variables['#attached']['drupalSettings']['degov_social_media_settings']['code'][$entity_id] = $markup;
      $variables['attributes']['class'][] = 'js-social-media-wrapper';
      $variables['attributes']['data-social-media-source'] = $media->field_social_media_source->value;
      $variables['attributes']['data-social-media-entity'] = $entity_id;
      $variables['social_media_disabled'] = TRUE;
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function degov_social_media_settings_preprocess_page(&$variables) {
  $variables['social_media_settings'] = TRUE;
  $variables['social_media_sources'] = degov_social_media_settings_sources();
  $variables['#attached']['library'][] = 'degov_social_media_settings/process';
  $variables['#attached']['drupalSettings']['degov_social_media_settings']['link'] = t('This social media source is disabled. You can enable it in the <a href="#" class="js-social-media-settings-open">social media settings</a>.');
  $variables['#attached']['drupalSettings']['degov_social_media_settings']['cookie'] = t('This social media source is disabled. After accepting our cookie policy, you can enable it.');

  foreach ($variables['social_media_sources'] as $key => $value) {
    $variables['#attached']['drupalSettings']['degov_social_media_settings']['sources'][$key] = FALSE;
  }
}

/**
 * Returns an array of allowed social media sources.
 *
 * @return array
 *   An array of allowed values.
 */
function degov_social_media_settings_sources() {
  return \Drupal::config('degov_social_media_settings.default')->get('sources');
}